{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","id","alt","name","src","image","onClick","clicked","Wrapper","children","Score","App","state","images","score","topScore","displayMessage","handleClick","event","target","filter","parseInt","setState","isGameWon","shuffle","restartGame","forEach","checkScore","a","i","length","j","Math","floor","random","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"60CAaeA,MAVf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKC,GAAIF,EAAME,GAAIC,IAAKH,EAAMI,KAAMC,IAAKL,EAAMM,MAAOC,QAASP,EAAMO,QAASC,QAASR,EAAMQ,a,MCA9FC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,aAAaD,EAAMU,W,MCG5BC,MAJf,SAAeX,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMU,W,OCgFvBE,E,2MA5EbC,MAAQ,CACNC,SACAC,MAAO,EACPC,SAAU,EACVC,eAAgB,2B,EAGlBC,YAAc,SAAAC,GACZ,IAAMjB,EAAKiB,EAAMC,OAAOlB,GAClBI,EAAQQ,EAAOO,QAAO,SAAAf,GAAK,OAAIA,EAAMJ,KAAOoB,SAASpB,MAAK,GAE1C,UAAlBI,EAAME,SACRF,EAAME,QAAU,OAChB,EAAKe,SACH,CACEN,eAAgB,yBAChBF,MAAO,EAAKF,MAAME,MAAQ,GACzB,EAAKS,WACV,EAAKC,QAAQX,KAEb,EAAKS,SACH,CACEN,eAAgB,wBAChBF,MAAO,IAEX,EAAKW,cACL,EAAKD,QAAQX,K,EAIjBY,YAAc,WACZZ,EAAOa,SAAQ,SAAArB,GAAWA,EAAME,QAAU,WAC1C,EAAKe,SAAS,CAAER,MAAO,K,EAGzBS,UAAY,WACV,EAAKI,aACoB,KAArB,EAAKf,MAAME,OACb,EAAKQ,SAAS,CACZN,eAAgB,YACf,EAAKS,c,EAIZE,WAAa,WACP,EAAKf,MAAME,MAAQ,EAAKF,MAAMG,UAChC,EAAKO,SAAS,CAAEP,SAAU,EAAKH,MAAME,S,EAIzCU,QAAU,SAAAI,GACR,IAAK,IAAIC,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADL,EAEtB,CAACD,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEG,GAF4B,KAIvC,OAAOH,G,wEAGC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,eAAeO,KAAKvB,MAAME,MAA1B,iBAA+CqB,KAAKvB,MAAMG,SAA1D,MAAuEoB,KAAKvB,MAAMI,gBAAuB,6BACxGmB,KAAKvB,MAAMC,OAAOuB,KAAI,SAAA/B,GAAK,OAC1B,kBAAC,EAAD,CACEgC,IAAKhC,EAAMJ,GACXA,GAAII,EAAMJ,GACVM,QAASF,EAAME,QACfF,MAAOA,EAAMA,MACbC,QAAS,EAAKW,sB,GAtERqB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.31d46436.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img id={props.id} alt={props.name} src={props.image} onClick={props.onClick} clicked={props.clicked}/>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n  return <h1 className=\"score\">{props.children}</h1>;\n}\n\nexport default Score;\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n\n  state = {\n    images,\n    score: 0,\n    topScore: 0,\n    displayMessage: \"Click an image to begin\",\n  };\n\n  handleClick = event => {\n    const id = event.target.id\n    const image = images.filter(image => image.id === parseInt(id))[0]\n\n    if (image.clicked === \"false\") {\n      image.clicked = \"true\";\n      this.setState(\n        {\n          displayMessage: \"You guessed correctly!\",\n          score: this.state.score + 1,\n        }, this.isGameWon);\n      this.shuffle(images);\n    } else {\n      this.setState(\n        {\n          displayMessage: \"Incorrect. Try again.\",\n          score: 0,\n        });\n      this.restartGame();\n      this.shuffle(images);\n    }\n  }\n\n  restartGame = () => {\n    images.forEach(image => { image.clicked = \"false\" });\n    this.setState({ score: 0 });\n  }\n\n  isGameWon = () => {\n    this.checkScore();\n    if (this.state.score === 12) {\n      this.setState({\n        displayMessage: \"You won!\"\n      }, this.restartGame);\n    }\n  }\n\n  checkScore = () => {\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score })\n    }\n  }\n\n  shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Score>Score: {this.state.score} | Top Score: {this.state.topScore} | {this.state.displayMessage}</Score><br></br>\n        {this.state.images.map(image => (\n          <Card\n            key={image.id}\n            id={image.id}\n            clicked={image.clicked}\n            image={image.image}\n            onClick={this.handleClick}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}